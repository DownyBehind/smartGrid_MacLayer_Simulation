# =========================================
# 변수 N : 기본 5 (명령행 -xN=20 로 덮어쓰기 가능)
# =========================================
# *.numHosts = ${N=20}

# =========================================
# OMNeT++ / INET — 강한 경합 실험용 설정
# =========================================
# csma_ca_test_for_Ayar_Paper.FakeWireCsmaCaNetwork.numHosts = ${N}

[General]
network = csma_ca_test_for_Ayar_Paper.FakeWireCsmaCaNetwork
sim-time-limit = 5s
# ★ NED 경로를 ini에 명시 (CLI -n 없이도 동작)

# 스칼라 기록 켜기(프로브는 recordScalar 사용)
**.result-recording-modes = +scalar

# ★ 라이브러리 로드: INET + TimeSlot (빌드 결과 경로에 맞춰 1개만 사용)
# 1) INET (현재 절대경로를 유지해도 OK)
load-libs = /home/kimdawoon/study/workspace/research/inet_plc/inet/out/clang-release/src/libINET.so \
            /home/kimdawoon/study/workspace/research/project_smartCharging_macLayer_improvement/TimeSlot/out/clang-release/libtimeslot.so
#   (만약 TimeSlot을 gcc로 빌드했다면 clang-release → gcc-release 로 바꿔 주세요)
#   예) .../TimeSlot/out/gcc-release/src/libtimeslot
cmdenv-interactive = false
# ned-path는 커맨드라인 -n 옵션으로 전달

# --- IP 자동설정 ---
*.configurator.config = xml("<config><interface hosts='**' address='10.0.0.x' netmask='255.255.255.0'/></config>")
*.configurator.addStaticRoutes = false

# --- 고정 위치 / “유선 같은” 무선환경 ---
*.host[*].mobility.typename = "StationaryMobility"

*.radioMedium.backgroundNoise.power = -100dBm
*.radioMedium.sameTransmissionStartTimeCheck = "ignore"
**.wlan[0].radio.transmitter.power = 20mW
#**.wlan[0].radio.receiver.sensitivity = -82dBm
**.wlan[0].radio.analogModel.typename = "ScalarAnalogModel"
**.wlan[0].radio.pathLoss.typename = "FreeSpacePathLoss"

# 802.11 운영 모드
**.wlan[*].opMode = "g(mixed)"

# ✨ EDCA만 활성
**.wlan[*].mac.useEdca = true
**.wlan[*].mac.useDcf  = false

# 관리 모듈을 Adhoc으로
*.host[*].wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"

# 에이전트 서브모듈은 비활성(있어도 비워둬도 됨)
*.host[*].wlan[0].agent.typename = ""

# CCA 임계값(캐리어 감지)과 수신 감도 분리
#**.wlan[*].radio.energyDetection = -75dBm     # 캐리어 감지 기준 ↑ (감지 어려워짐)
#**.wlan[*].radio.sensitivity     = -92dBm     # 디코딩 기준 ↓ (수신기에서 받기 쉬움)
# =================================================================
# [수정 2] OMNeT++ 6.1 호환 문법으로 변경
# =================================================================
# 기본적으로 모든 벡터/스칼라 기록 비활성화
**.result-recording-modes = -*

# 1. Throughput 계산 및 MAC 효율 계산용
#    (packetReceivedFromPeer 시그널의 vector와 count 통계 기록)
**.result-recording-modes = +vector(packetReceivedFromPeer), +count(packetReceivedFromPeer)

# 2. 재시도 비율/전체 프레임 수 계산용
**.result-recording-modes = +count(packetSentToPeerWithRetry), +count(packetSentToPeerWithoutRetry)

# 3. MAC 재시도 한계 드랍률 계산용 (wlan 모듈에만 적용)
**.wlan[*].mac.*.result-recording-modes = +count(packetDropRetryLimitReached)

# 4. ARP 실패 카운트용 (arp 모듈에만 적용)
**.arp.result-recording-modes = +count(packetDropAddressResolutionFailed)

# 5. Throughput 계산 fallback용 (UDP Sink에만 적용)
*.host[0].app[0].result-recording-modes = +scalar("rcvdPk:sum(packetBytes)")

# 6. 재시도 경향 파악용
**.result-recording-modes = +scalar(retryCount)

# 타임라인 이벤트로그 켜기
result-dir = /home/kimdawoon/study/workspace/research/project_smartCharging_macLayer_improvement/csma_ca_test_for_Ayar_Paper/ini/results

cmdenv-redirect-output = true

# record-eventlog = true
# eventlog-file = ${resultdir}/${configname}-${runnumber}.elog

cmdenv-express-mode = false

**.cmdenv-log-level = WARN
*.tsObs.txProbe.cmdenv-log-level = INFO
cmdenv-output-file = ${resultdir}/${configname}-${runnumber}.log
cmdenv-autoflush = true                  # 버퍼링 없이 즉시 기록


# -------------------------
# 기본 실험 구성
# -------------------------
[Config Base]
*.host[*].app[0].typename = "timeslot.SmartUdpApp"

# 중심 수신기
*.host[0].mobility.initialX = 0m
*.host[0].mobility.initialY = 0m

# 나머지 송신 노드를 반지름 20 m, 원주 균등 배치
# *.host[1..${N}-1].mobility.initialX = cos( ($index-1) * 2 * 3.141592653589793 / (${N}-1) ) * 80m
# *.host[1..${N}-1].mobility.initialY = sin( ($index-1) * 2 * 3.141592653589793 / (${N}-1) ) * 80m



# ----- 이하 Base에 이미 있던 기존 설정들 -----

# --- 트래픽: 모든 호스트(일단) 송신 앱 설정 ---
*.host[*].numApps = 1
# *.host[*].app[0].typename = "UdpBasicApp"
*.host[*].app[0].destAddresses = "host[0]"
*.host[*].app[0].destPort = 5000
*.host[*].app[0].messageLength = 1500B
*.host[*].app[0].startTime = 1s
*.host[*].app[0].sendInterval = 0.5ms

# --- host[0]은 수신 전용(sink)으로 override ---
*.host[0].app[0].typename = "UdpSink"
*.host[0].app[0].localPort = 5000

# --- DCF 파라미터(정확 경로) ---
**.wlan[*].mac.dcf.rtsPolicy.rtsThreshold = 999999B
#**.wlan[*].mac.dcf.channelAccess.cwMin = 7
#**.wlan[*].mac.dcf.channelAccess.cwMax = 7
# (선택) 재시도 한계 낮춰 드롭 유도: 실제 파라미터명은 버전에 따라 다를 수 있음
# **.wlan[*].mac.dcf.retryLimit = 3

# --- 분석 편의: 관심 통계 명시적 기록 권장 ---
# (CW 변화 이벤트)
#**.wlan[*].mac.recoveryProcedure.contentionWindowChanged:vector-recording = true
# (재시도 한계 초과 드롭)
#**.wlan[*].mac.recoveryProcedure.retryLimitReached:scalar-recording = true
# (UdpSink 수신 바이트/패킷)
#*.host[0].app[0].rcvdPk:vector-recording = true
#*.host[0].app[0].rcvdPk:sum(packetBytes)-recording = true
#*.host[0].app[0].rcvdPk:count-recording = true

**.wlan[*].mac.dcf.channelAccess.pendingQueue.packetCapacity = 10000   # 패킷 수 기준
**.wlan[*].mac.dcf.channelAccess.pendingQueue.dataCapacity   = 100MiB  # 바이트 기준(지원 시)



# -----------------------------------------
# 1단계 HPGP 근사: EDCA를 이용한 우선순위/경쟁 파라미터만 적용
#  - 비콘/슈퍼프레임/CTA 없음
#  - ACK/재전송 유지
# -----------------------------------------
[Config HPGP_Step1]
extends = Base

# 모든 노드가 같은 IBSS를 쓰도록
*.host[*].wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"
*.host[*].wlan[0].mgmt.ssid = "hpgp-step1"       # 추가
**.wlan[*].opMode = "g(mixed)"
**.wlan[*].mac.useEdca = true
**.wlan[*].mac.useDcf  = false
*.host[*].wlan[0].radio.channelNumber = 1        # 추가(전 노드 동일 채널)

**.arp.typename = "GlobalArp"


# QoS(EDCA)를 확실히 사용
**.wlan[*].mac.qosStation = true

# 최종 CCA/감도 (HPGP 1단계 근사)
FakeWireCsmaCaNetwork.host[*].wlan[0].radio.energyDetection = -95dBm
FakeWireCsmaCaNetwork.host[*].wlan[0].radio.sensitivity     = -92dBm

# RTS 비활성
**.wlan[*].mac.dcf.rtsPolicy.rtsThreshold = 999999B

# EDCA(HPGP 우선순위 근사) - 이미 쓰신 값 유지
**.wlan[*].mac.hcf.edca[AC_VO].contention.cwMin = 3
**.wlan[*].mac.hcf.edca[AC_VO].contention.cwMax = 7
**.wlan[*].mac.hcf.edca[AC_VO].contention.aifsn = 2

**.wlan[*].mac.hcf.edca[AC_VI].contention.cwMin = 7
**.wlan[*].mac.hcf.edca[AC_VI].contention.cwMax = 15
**.wlan[*].mac.hcf.edca[AC_VI].contention.aifsn = 2

**.wlan[*].mac.hcf.edca[AC_BE].contention.cwMin = 15
**.wlan[*].mac.hcf.edca[AC_BE].contention.cwMax = 31
**.wlan[*].mac.hcf.edca[AC_BE].contention.aifsn = 3

**.wlan[*].mac.hcf.edca[AC_BK].contention.cwMin = 31
**.wlan[*].mac.hcf.edca[AC_BK].contention.cwMax = 63
**.wlan[*].mac.hcf.edca[AC_BK].contention.aifsn = 7

#**.arp.*-recording = true

########################################
# Paper_Baseline – INET 4.5.4 / OMNeT++ 6.1
########################################
[Config Paper_Baseline]

extends = Base

# **.result-recording-modes = +scalar
**.scalar-recording = true      # recordScalar() 출력이 .sca에 기록됨
**.tsObs.targetNodePath = ".host[0]"

# 시뮬 시간(안정 구간 확보용)
# sim-time-limit = 5s
# 802.11 인터페이스 고정
*.host[*].wlan[0].typename = "Ieee80211Interface"
*.host[*].wlan[0].mac.typename = "Ieee80211Mac"
*.host[*].wlan[0].radio.typename = "Ieee80211ScalarRadio"

# Ad-hoc 모드: 관리/연결 절차 제거
*.host[*].wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"
*.host[*].wlan[0].agent.typename = ""

# 실험 조건(예: 논문 베이스라인에 맞춤)
**.wlan[*].opMode = "g(erp)"
**.wlan[*].bitrate = 12Mbps
# 필요 시 DCF만 쓰도록 단순화
**.wlan[*].mac.qosStation = false        # EDCA 비활성(원한다면)
**.wlan[*].mac.rtsThreshold = 2346B      # RTS/CTS 비활성(페이로드 전부 RTS 미사용)
**.wlan[*].mac.fragmentationThreshold = 2346B

# (선택) EDCA 끄기 등 간소화가 필요하면
# **.wlan[*].mac.qosStation = false


# === 트래픽: 포화에 가깝게 ===
#   - 모두 host[0]으로 UDP 전송 (sink)
#   - 짧은 간격으로 포화 부하 유도
*.host[*].app[0].messageLength = 1500B
# *.host[*].app[0].sendInterval  = 0.5ms
*.host[*].app[0].startTime     = uniform(1s, 1.2s)

# === MAC: DCF만 사용 (EDCA 비활성) ===
**.wlan[*].mac.useEdca = false
**.wlan[*].mac.useDcf  = true

**.wlan[*].mac.ackPolicy = true

# 충돌 민감도 높이도록 CW 범위 넓게 (802.11g 기본에 근접)
**.wlan[*].mac.dcf.channelAccess.cwMin = 31
**.wlan[*].mac.dcf.channelAccess.cwMax = 1023

# 재시도 한계 (INET 4.5.4 경로)
**.wlan[*].mac.dcf.recoveryProcedure.shortRetryLimit = 7
**.wlan[*].mac.dcf.recoveryProcedure.longRetryLimit  = 7


# === 채널 모델: 비감쇠/비에러 (충돌만 보이게) ===
# *.radioMedium.typename = "IdealRadioMedium"

# --- 무선 매질: Ideal -> Scalar (현실적 전파/간섭/감지)
*.radioMedium.typename = "Ieee80211ScalarRadioMedium"


# === ARP 실패 방지 (논문과 무관 이슈 제거) ===
**.arp.typename = "GlobalArp"

# === OMNeT++ 6.1 스타일 결과 기록 최소화 ===
#   기본 비활성화
# **.result-recording-modes = -*
# **.result-recording-modes = -*

# 1. Throughput 계산 및 MAC 효율 계산용
#    (packetReceivedFromPeer 시그널의 vector와 count 통계 기록)
**.result-recording-modes = +vector(packetReceivedFromPeer), +count(packetReceivedFromPeer)

# 2. 재시도 비율/전체 프레임 수 계산용
**.result-recording-modes = +count(packetSentToPeerWithRetry), +count(packetSentToPeerWithoutRetry)

# 3. MAC 재시도 한계 드랍률 계산용 (wlan 모듈에만 적용)
**.wlan[*].mac.*.result-recording-modes = +count(packetDropRetryLimitReached)

# 4. ARP 실패 카운트용 (arp 모듈에만 적용)
**.arp.result-recording-modes = +count(packetDropAddressResolutionFailed)

# 5. Throughput 계산 fallback용 (UDP Sink에만 적용)
*.host[0].app[0].result-recording-modes = +scalar("rcvdPk:sum(packetBytes)"), +scalar("rcvdPk:count")



# cmdenv-express-mode = true
# **.cmdenv-log-level = INFO
# cmdenv-status-frequency = 2s

# ---- TxOutcomeProbe 진단 ON ----
*.tsObs.txProbe.debugSignals = true     # 모든 시그널 상위 N줄 덤프
*.tsObs.txProbe.debugMaxLines = 20      # 최대 20줄만
sim-time-limit = 8s                   # 짧게 돌려 로그만 확인

# 전 노드 probe 공통 설정
*.host[*].txProbe.sifs        = 16e-6s
*.host[*].txProbe.cifs        = 34e-6s
*.host[*].txProbe.ackTxTime   = 44e-6s
*.host[*].txProbe.ackTimeout  = 60e-6s

*.host[*].busyIdleProbe.slotTime = 9e-6s
*.host[*].txProbe.slotTime       = 9e-6s
*.cfg.cmdenv-log-level = INFO     # ← SendIntervalConfigurator 대상
