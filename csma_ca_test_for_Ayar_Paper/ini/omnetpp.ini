# =========================================
# OMNeT++ / INET — 강한 경합 실험용 설정
# =========================================

[General]
network = csma_ca_fakewired.FakeWireCsmaCaNetwork
sim-time-limit = 30s
load-libs = /home/kimdawoon/study/workspace/research/inet/out/clang-release/src/INET
cmdenv-interactive = false
# ned-path는 커맨드라인 -n 옵션으로 전달

# --- IP 자동설정 ---
*.configurator.config = xml("<config><interface hosts='**' address='10.0.0.x' netmask='255.255.255.0'/></config>")
*.configurator.addStaticRoutes = false

# --- 고정 위치 / “유선 같은” 무선환경 ---
*.host[*].mobility.typename = "StationaryMobility"
# 왼쪽 클러스터 (1..24번)
*.host[1..2].mobility.initialX = 100m
*.host[1..2].mobility.initialY = 0m

# 오른쪽 클러스터 (25..49번)
*.host[3..4].mobility.initialX = 400m
*.host[3..4].mobility.initialY = 0m

*.host[*].mobility.initialZ = 0m

# 중앙 수신기
*.host[0].mobility.initialX = 200m
*.host[0].mobility.initialY = 0m

*.radioMedium.backgroundNoise.power = -100dBm
**.wlan[0].radio.transmitter.power = 20mW
#**.wlan[0].radio.receiver.sensitivity = -82dBm
**.wlan[0].radio.analogModel.typename = "ScalarAnalogModel"
**.wlan[0].radio.pathLoss.typename = "FreeSpacePathLoss"

# 802.11 운영 모드
**.wlan[*].opMode = "g(mixed)"

# ✨ EDCA만 활성
**.wlan[*].mac.useEdca = true
**.wlan[*].mac.useDcf  = false

# 관리 모듈을 Adhoc으로
*.host[*].wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"

# 에이전트 서브모듈은 비활성(있어도 비워둬도 됨)
*.host[*].wlan[0].agent.typename = ""

# CCA 임계값(캐리어 감지)과 수신 감도 분리
#**.wlan[*].radio.energyDetection = -75dBm     # 캐리어 감지 기준 ↑ (감지 어려워짐)
#**.wlan[*].radio.sensitivity     = -92dBm     # 디코딩 기준 ↓ (수신기에서 받기 쉬움)

# 결과 기록(초기 탐색 편의상 전체 벡터 on)
**.vector-recording = true

# -------------------------
# 기본 실험 구성
# -------------------------
[Config Base]
**.numHosts = ${n=5}

# --- 트래픽: 모든 호스트(일단) 송신 앱 설정 ---
*.host[*].numApps = 1
*.host[*].app[0].typename = "UdpBasicApp"
*.host[*].app[0].destAddresses = "host[0]"
*.host[*].app[0].destPort = 5000
*.host[*].app[0].messageLength = 1500B
*.host[*].app[0].startTime = 1s
*.host[*].app[0].sendInterval = 0.5ms

# --- host[0]은 수신 전용(sink)으로 override ---
*.host[0].app[0].typename = "UdpSink"
*.host[0].app[0].localPort = 5000

# --- DCF 파라미터(정확 경로) ---
**.wlan[*].mac.dcf.rtsPolicy.rtsThreshold = 999999B
#**.wlan[*].mac.dcf.channelAccess.cwMin = 7
#**.wlan[*].mac.dcf.channelAccess.cwMax = 7
# (선택) 재시도 한계 낮춰 드롭 유도: 실제 파라미터명은 버전에 따라 다를 수 있음
# **.wlan[*].mac.dcf.retryLimit = 3

# --- 분석 편의: 관심 통계 명시적 기록 권장 ---
# (CW 변화 이벤트)
#**.wlan[*].mac.recoveryProcedure.contentionWindowChanged:vector-recording = true
# (재시도 한계 초과 드롭)
#**.wlan[*].mac.recoveryProcedure.retryLimitReached:scalar-recording = true
# (UdpSink 수신 바이트/패킷)
#*.host[0].app[0].rcvdPk:vector-recording = true
#*.host[0].app[0].rcvdPk:sum(packetBytes)-recording = true
#*.host[0].app[0].rcvdPk:count-recording = true

**.wlan[*].mac.dcf.channelAccess.pendingQueue.packetCapacity = 10000   # 패킷 수 기준
**.wlan[*].mac.dcf.channelAccess.pendingQueue.dataCapacity   = 100MiB  # 바이트 기준(지원 시)



# -------------------------
# 노드 수 변화 시나리오
# -------------------------
[Config N20]
extends = Base
**.numHosts = 20

[Config N50]
extends = Base
**.numHosts = 50

# -----------------------------------------
# 1단계 HPGP 근사: EDCA를 이용한 우선순위/경쟁 파라미터만 적용
#  - 비콘/슈퍼프레임/CTA 없음
#  - ACK/재전송 유지
# -----------------------------------------
[Config HPGP_Step1]
extends = Base

# 모든 노드가 같은 IBSS를 쓰도록
*.host[*].wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"
*.host[*].wlan[0].mgmt.ssid = "hpgp-step1"       # 추가
**.wlan[*].opMode = "g(mixed)"
**.wlan[*].mac.useEdca = true
**.wlan[*].mac.useDcf  = false
*.host[*].wlan[0].radio.channelNumber = 1        # 추가(전 노드 동일 채널)

**.arp.typename = "GlobalArp"


# QoS(EDCA)를 확실히 사용
**.wlan[*].mac.qosStation = true

# 최종 CCA/감도 (HPGP 1단계 근사)
FakeWireCsmaCaNetwork.host[*].wlan[0].radio.energyDetection = -95dBm
FakeWireCsmaCaNetwork.host[*].wlan[0].radio.sensitivity     = -92dBm

# RTS 비활성
**.wlan[*].mac.dcf.rtsPolicy.rtsThreshold = 999999B

# EDCA(HPGP 우선순위 근사) - 이미 쓰신 값 유지
**.wlan[*].mac.hcf.edca[AC_VO].contention.cwMin = 3
**.wlan[*].mac.hcf.edca[AC_VO].contention.cwMax = 7
**.wlan[*].mac.hcf.edca[AC_VO].contention.aifsn = 2

**.wlan[*].mac.hcf.edca[AC_VI].contention.cwMin = 7
**.wlan[*].mac.hcf.edca[AC_VI].contention.cwMax = 15
**.wlan[*].mac.hcf.edca[AC_VI].contention.aifsn = 2

**.wlan[*].mac.hcf.edca[AC_BE].contention.cwMin = 15
**.wlan[*].mac.hcf.edca[AC_BE].contention.cwMax = 31
**.wlan[*].mac.hcf.edca[AC_BE].contention.aifsn = 3

**.wlan[*].mac.hcf.edca[AC_BK].contention.cwMin = 31
**.wlan[*].mac.hcf.edca[AC_BK].contention.cwMax = 63
**.wlan[*].mac.hcf.edca[AC_BK].contention.aifsn = 7

#**.arp.*-recording = true


[Config Paper_Baseline]
extends = Base
network = csma_ca_fakewired.FakeWireCsmaCaNetwork
description = "Baseline scenario from Ayar et al. (2015)"

# --- Simulation Time ---
sim-time-limit = 60s

# --- Node Count ---
**.numHosts = 5

# --- PHY Layer ---
**.wlan[*].bitrate = 12Mbps
**.wlan[*].opMode = "g(mixed)"

# --- Application (UDP Traffic) ---
*.host[*].numApps = 1
*.host[*].app[0].typename = "UdpBasicApp"
*.host[*].app[0].destAddresses = "host[0]"
*.host[*].app[0].destPort = 5000
*.host[*].app[0].messageLength = 800B  # 논문과 동일 크기
*.host[*].app[0].sendInterval = exponential(0.1s) # 평균 0.1초 간격
*.host[*].app[0].startTime = uniform(1s,2s) # 초기 혼잡 최소화 위해 랜덤 시작

# host[0]은 Sink만 수행 (UDP Sink)
*.host[0].app[0].typename = "UdpSink"
*.host[0].app[0].localPort = 5000
*.host[0].app[0].destAddresses = ""

# --- MAC Layer (DCF 설정 논문과 동일하게) ---
**.wlan[*].mac.useEdca = false   # EDCA 미사용 (Baseline은 DCF만 사용)
**.wlan[*].mac.useDcf = true     # DCF 사용 필수 활성화

# DCF Contention Window 설정
**.wlan[*].mac.dcf.channelAccess.cwMin = 7
**.wlan[*].mac.dcf.channelAccess.cwMax = 15

# (✅) INET 4.5.4에서 실제로 존재하는 파라미터
**.wlan[*].mac.dcf.recoveryProcedure.shortRetryLimit = 7   # DATA-Frame용
**.wlan[*].mac.dcf.recoveryProcedure.longRetryLimit  = 7   # RTS/CTS 보호 Frame용
# RTS 비활성화
**.wlan[*].mac.dcf.rtsPolicy.rtsThreshold = 999999B

# --- Channel 설정 (ideal 환경 근사화) ---
**.radioMedium.typename = "IdealRadioMedium"  # 이상적 조건으로 최대한 간섭 배제

# 수신 감도와 전송 출력 명확히
**.wlan[*].radio.transmitter.power = 20mW
**.wlan[*].radio.sensitivity = -92dBm
**.wlan[*].radio.energyDetection = -95dBm

# --- Mobility 설정 (Star 구조 명확화) ---
*.host[*].mobility.typename = "StationaryMobility"
# 중앙 수신기 host[0]
*.host[0].mobility.initialX = 0m
*.host[0].mobility.initialY = 0m
# 주변 노드들 (host[1]~host[4])
*.host[1].mobility.initialX = 10m
*.host[1].mobility.initialY = 0m
*.host[2].mobility.initialX = -10m
*.host[2].mobility.initialY = 0m
*.host[3].mobility.initialX = 0m
*.host[3].mobility.initialY = 10m
*.host[4].mobility.initialX = 0m
*.host[4].mobility.initialY = -10m

# --- 성능 측정 결과 기록 ---
**.vector-recording = true
**.scalar-recording = true
**.packetDroppedSignal.scalar-recording = true
**.packetDroppedSignal.vector-recording = true
